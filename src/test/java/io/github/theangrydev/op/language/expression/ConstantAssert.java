/*
 * Copyright 2015-2020 Liam Williams <liam.williams@zoho.com>.
 *
 * This file is part of op.
 *
 * op is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * op is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with op.  If not, see <http://www.gnu.org/licenses/>.
 */
package io.github.theangrydev.op.language.expression;

/**
 * {@link Constant} specific assertions - Generated by CustomAssertionGenerator.
 *
 * Although this class is not final to allow Soft assertions proxy, if you wish to extend it, 
 * extend {@link AbstractConstantAssert} instead.
 */
@javax.annotation.Generated(value="assertj-assertions-generator")
public class ConstantAssert extends AbstractConstantAssert<ConstantAssert, Constant> {

  /**
   * Creates a new <code>{@link ConstantAssert}</code> to make assertions on actual Constant.
   * @param actual the Constant we want to make assertions on.
   */
  public ConstantAssert(Constant actual) {
    super(actual, ConstantAssert.class);
  }

  /**
   * An entry point for ConstantAssert to follow AssertJ standard <code>assertThat()</code> statements.<br>
   * With a static import, one can write directly: <code>assertThat(myConstant)</code> and get specific assertion with code completion.
   * @param actual the Constant we want to make assertions on.
   * @return a new <code>{@link ConstantAssert}</code>
   */
  @org.assertj.core.util.CheckReturnValue
  public static ConstantAssert assertThat(Constant actual) {
    return new ConstantAssert(actual);
  }
}
